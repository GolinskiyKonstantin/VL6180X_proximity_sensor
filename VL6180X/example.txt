/*	сохраняем данный файл в кодировке UTF-8		*/

	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com

///////////////////////////////////////////////////////////////////////////////////////////

#include "stdio.h"


#include "VL6180X.h"

// расспиновка модуля:
// VIN - питание модуля через стабилизатор напряжения (3-5 Вольт) Сам модуль работает максимум 2.8 Вольт
// 2V8 - питание модуля напрямую миную стабилизатор (2.8 Вольт), также при питании через VIN с данного пина можно снимать напряжение 2.8 Вольт до 150 мА
// GND - земля
// GPIO/GPIO1 - Выход прерывания. Открытый сток. Если используется, его следует тянуть вверх с 47 кОм резистор, в противном случае оставить неподключенным. 
//							Прерывание срабатывает при ниском уровне, Окуратно с этим портом он подтянут к 2.8 Вольтам если случайно туда дадим больше то модуль згорит.
// SHDN/GPIO0/CE - По умолчанию при включении включен чип (СЕ). Его следует тянуть высоко с помощью Резистор 47 кОм. Для отключения модуля тянем его к земле.
//							на модуле подтянут к питанию 2.8 Вольт через диод ( поетому когда на ножке будет +3.3 Вольта диод не пропустит )
// SCL - i2c
// SDA - i2c

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// внимание!!! есть похожий датчик Китайский аналог он имеет 2 отверстия ( оригинал имеет 3 отверстия ) там где 2 отверстия тот измеряет только растояние ( стоит дешевле )
// отверстия идут в один ряд ( есть еще очень маленькое сбоку но ето к датчику не относиться )
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// создаем структуры для датчиков ( на каждый датчик своя структура )
VL6180x vl6180x_one;
VL6180x vl6180x_two;


// глобальные переменные для вывода информации в дебаг ( для первого датчика )
uint8_t dist_one = 0;
float als_one = 0.0f;

// глобальные переменные для вывода информации в дебаг ( для второго датчика )
uint8_t dist_two = 0;
float als_two = 0.0f;

// создаем структуру для получения информации о датчике ( ID дата производства и т.д. )
VL6180xIdentification id_vl6180x;

// создаем буффер для вывода информации для датчика в виде строки ( для примера )
char ID_buff[140] = {0, };

// создаем переменные для согранения данных ( для дебага ) о датчике
uint8_t id_Model = 0;									// ID всегда одно и тоже у всех датчиков = 0xB4

uint8_t id_ModelRevMajor = 0;					// Model Number
uint8_t id_ModelRevMinor = 0;					// Model Number
uint8_t id_ModuleRevMajor = 0;				// Module major revision
uint8_t id_ModuleRevMinor = 0;				// Module minor revision
uint16_t id_Date = 0;									// Manufacture date
uint16_t id_Time = 0;									// Manufacture time seconds after midnight
	
///////////////////////////////////////////////////////////////////////////////////////////

	.........
	.........

main()=============================================================================================================================

//////////////////////////////////////////////////////////////////////////////////////////

	//--------------------------------------------------------------------------------
//	// для одного датчика просто перегружаем его перед инициализацией
//	HAL_GPIO_WritePin ( SHDN_ONE_GPIO_Port, SHDN_ONE_Pin, GPIO_PIN_RESET);
//	HAL_Delay (100);
//	HAL_GPIO_WritePin ( SHDN_ONE_GPIO_Port, SHDN_ONE_Pin, GPIO_PIN_SET);
//	HAL_Delay (100);	// делаем задержку чтобы датчик запустился ( иначе не коректно инициализируеться )
	//--------------------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// усли используем два или более датчика то отключаем их так как у всех один и тотже адресс
	// но программно можно поменять адресс но он не храниться при выключенном датчике 
	// ( нужно записывать новый адресс каждый раз при включении )
	
	// отключаем второй датчик ( если их больше 2 то все отключаем кроме первого )
	HAL_GPIO_WritePin ( SHDN_TWO_GPIO_Port, SHDN_TWO_Pin, GPIO_PIN_RESET);
	
	// включаем первый датчик
	HAL_GPIO_WritePin ( SHDN_ONE_GPIO_Port, SHDN_ONE_Pin, GPIO_PIN_SET);
	HAL_Delay (100);	// делаем задержку чтобі датчик запустился ( иначе не коректно инициализируеться )
	
	// инициализируем первый датчик по оригинальному адрессу
	VL6180x_init( &vl6180x_one, hi2c1, VL6180X_SLAVE_ADDRESS );
	
	// меняем адресс первого датчика на любое значение 
	VL6180x_changeAddress( &vl6180x_one, 0x33<<1 );
	
	// включаем второй датчик
	HAL_GPIO_WritePin ( SHDN_TWO_GPIO_Port, SHDN_TWO_Pin, GPIO_PIN_SET);
	HAL_Delay (100);	// делаем задержку чтобі датчик запустился ( иначе не коректно инициализируеться )
	
	// инициализируем второй датчик по оригинальному адрессу
	VL6180x_init( &vl6180x_two, hi2c1, VL6180X_SLAVE_ADDRESS );
	
	// меняем адресс второго датчика на любое значение 
	VL6180x_changeAddress( &vl6180x_one, 0x34<<1 );
	
	// если датчиков больше двух то далаем так, по очереди включаем и задаем новый адресс.
	// адресса указанные храняться в структурах которые для каждого датчика отдельно создаються.
	
	//--------------------------------------------------------------------------------

	
	// запрашиваем данные о датчике ( делаем запрос для одного датчика )
	VL6180x_getIdentification( &vl6180x_one, &id_vl6180x );
	
	id_Model = id_vl6180x.idModel; 												// ID всегда одно и тоже у всех датчиков = 0xB4
	id_ModelRevMajor = id_vl6180x.idModelRevMajor;				// Model Number
	id_ModelRevMinor = id_vl6180x.idModelRevMinor;				// Model Number
	id_ModuleRevMajor = id_vl6180x.idModuleRevMajor;			// Module major revision
	id_ModuleRevMinor = id_vl6180x.idModuleRevMinor;			// Module minor revision
	id_Date = id_vl6180x.idDate;													// Manufacture date
	id_Time = id_vl6180x.idTime;													// Manufacture time seconds after midnight
	
	// выводим в виде строки данные о датчике
	sprintf( ID_buff, "Model ID = 0x%02X, Model Rev = %u.%u, Module Rev = %u.%u, Manufacture Date = %02d/%02d/1%d, Phase: %d, Manufacture Time (s)= %u", 
				id_Model, id_ModelRevMajor, id_ModelRevMinor, id_ModuleRevMajor, id_ModuleRevMinor, ((id_Date >> 3) & 0x001F), ((id_Date >> 8) & 0x000F), ((id_Date >> 12) & 0x000F), (id_Date & 0x0007), (id_Time * 2) );
	
//////////////////////////////////////////////////////////////////////////////////////////
	
	.........
	.........
	.........

while(1)===========================================================================================================================

		///////////////////////////////////////////////////////////////////////////////////////////
		
		// делаем замер расстояния на первом датчике
		VL6180x_getDistance( &vl6180x_one );
		// получаем данные замера
		dist_one = vl6180x_one.distance;
		
		// делаем замер освещения на первом датчике
		VL6180x_getAmbientLight( &vl6180x_one, GAIN_40 );
		// получаем данные замера
		als_one = vl6180x_one.alsCalculated;
	
		
		// делаем замер расстояния на втором датчике
		VL6180x_getDistance( &vl6180x_two );
		// получаем данные замера
		dist_two = vl6180x_two.distance;
		
		// делаем замер освещения на втором датчике
		VL6180x_getAmbientLight( &vl6180x_two, GAIN_40 );
		// получаем данные замера
		als_two = vl6180x_two.alsCalculated;
		
		HAL_Delay(100);
		
		///////////////////////////////////////////////////////////////////////////////////////////

	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
